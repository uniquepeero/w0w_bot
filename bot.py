import telebot
from telebot import types
from telebot import util
import configparser
import logging
from os import path
import requests
import json


log = logging.getLogger(__name__)
log.setLevel(logging.INFO)
fh = logging.FileHandler("logs.log", 'w', encoding="utf-8",)
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
fh.setFormatter(formatter)
log.addHandler(fh)



chats = {}

if path.isfile('config.ini'):
	config = configparser.ConfigParser()
	config.read('config.ini')
	BOT_KEY = config['API']['bot']
	KTR_HEADER = {'Api-Key': config['Keitaro']['APIKEY']}
	KTR_URL = config['Keitaro']['URL']
else:
	log.critical('Config file not found')

bot = telebot.TeleBot(BOT_KEY)


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
	log.debug(f'Command handler got: {message.text}')
	bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç ‚úå\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è —É–º–µ—é –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Å–ø–∏—Å–æ–∫ –ø–ª–æ—Ö–∏—Ö –ø–ª–æ—â–∞–¥–æ–∫, –∫—Ä–µ–æ –∏ —Ç.–ø.\n\n"
	                      "–ü—Ä–∏—à–ª–∏ –º–Ω–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ ID –∫–∞–º–ø–∞–Ω–∏–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ \n–ù–∞–ø—Ä–∏–º–µ—Ä:\n\n111 sub_id_3\n224 external_id\n454 creative_id\n323 source")


@bot.message_handler(content_types=['text'])
def get_first_message(message):
	if not message.text.isdigit():
		bot.reply_to(message, '–ù–µ-–Ω–µ-–Ω–µ, –¥–∞–≤–∞–π ID –∫–∞–º–ø–∞–Ω–∏–∏ üôà')
	else:
		chats[message.chat.id] = {
			'campid': message.text,
			'group': None,
			'interval': None
		}
		msg = bot.reply_to(message, '–ü–æ –∫–∞–∫–æ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å?')
		bot.register_next_step_handler(msg, process_group)


def process_group(message):
	chats[message.chat.id]['group'] = message.text.lower()
	markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
	markup.add('–°–µ–≥–æ–¥–Ω—è', '–í—á–µ—Ä–∞', '–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è', '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π', '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π', '–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü', '–ó–∞ –≥–æ–¥', '–¢–µ–∫—É—â–∏–π –≥–æ–¥', '–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è')
	msg = bot.reply_to(message, '–ò –∑–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥', reply_markup=markup)
	bot.register_next_step_handler(msg, process_interval)


def process_interval(message):
	chatid = message.chat.id
	try:
		chats[chatid]['interval'] = {
			'–°–µ–≥–æ–¥–Ω—è': 'today',
			'–í—á–µ—Ä–∞': 'yesterday',
			'–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è': 'first_day_of_this_week',
			'–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π': '7_days_ago',
			'–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π': '1_month_ago',
			'–≠—Ç–æ—Ç –º–µ—Å—è—Ü': 'first_day_of_this_month',
			'–ó–∞ –≥–æ–¥': '1_year_ago',
			'–¢–µ–∫—É—â–∏–π –≥–æ–¥': 'first_day_of_this_year',
			'–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è': 'all_time'
		}[message.text]
	except KeyError:
		msg = bot.reply_to(message, '–í—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
		bot.register_next_step_handler(msg, process_interval)
		return
	log.debug(f'{chatid} : {chats[chatid]}')
	res_msg = check_camp(chats[chatid], message)
	if res_msg and len(res_msg) <= 3000 and res_msg != '–ü—É—Å—Ç–æ–π –æ—Ç—á–µ—Ç üôà':
		bot.send_message(chatid, res_msg)
		markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
		markup.add('–ù–µ –≤—ã–≤–æ–¥–∏—Ç—å', '–° –Ω–æ–≤–æ–π —Å—Ç—Ä–æ—á–∫–∏', '–ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é', '–ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é —Å –ø—Ä–æ–±–µ–ª–æ–º')
		msg = bot.send_message(chatid, f'–í –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ {chats[chatid]["group"]}?', reply_markup=markup)
		bot.register_next_step_handler(msg, format_output)
	elif res_msg and len(res_msg) > 3000 and res_msg != '–ü—É—Å—Ç–æ–π –æ—Ç—á–µ—Ç üôà':
		markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
		markup.add('–î–∞', '–ù–µ—Ç')
		msg = bot.send_message(chatid, f'–û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç {len(res_msg)} —Å–∏–º–≤–æ–ª–æ–≤.\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å?', reply_markup=markup)
		chats[chatid]['message'] = res_msg
		bot.register_next_step_handler(msg, long_message)
	elif res_msg == '–ü—É—Å—Ç–æ–π –æ—Ç—á–µ—Ç üôà': bot.send_message(chatid, res_msg)


def long_message(message):
	answ = message.text
	chatid = message.chat.id
	if answ == '–î–∞':
		splitted_text = util.split_string(chats[message.chat.id]['message'], 3000)
		for text in splitted_text: bot.send_message(message.chat.id, text)
		markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
		markup.add('–ù–µ –≤—ã–≤–æ–¥–∏—Ç—å', '–° –Ω–æ–≤–æ–π —Å—Ç—Ä–æ—á–∫–∏', '–ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é', '–ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é —Å –ø—Ä–æ–±–µ–ª–æ–º')
		msg = bot.send_message(chatid, f'–í –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ {chats[chatid]["group"]}?', reply_markup=markup)
		bot.register_next_step_handler(msg, format_output)
	elif answ == '–ù–µ—Ç':
		bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞')
		del chats[message.chat.id]
	else:
		msg = bot.reply_to(message, '–í—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
		bot.register_next_step_handler(msg, long_message)


def format_output(message):
	try:
		answ = message.text
		chat_id = message.chat.id
		if answ == '–ù–µ –≤—ã–≤–æ–¥–∏—Ç—å':
			bot.send_message(chat_id, 'üëå')
			del chats[message.chat.id]
		elif answ == '–° –Ω–æ–≤–æ–π —Å—Ç—Ä–æ—á–∫–∏': pretty_send(chat_id, '\n')
		elif answ == '–ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é': pretty_send(chat_id, ',')
		elif answ == '–ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é —Å –ø—Ä–æ–±–µ–ª–æ–º': pretty_send(chat_id, ', ')
		else:
			msg = bot.reply_to(message, '–í—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
			bot.register_next_step_handler(msg, format_output)
	except KeyError:
		log.error(f'–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ {chat_id}')


def pretty_send(chat_id, delimeter):
	if len(delimeter.join(chats[chat_id]['group_list'])) <= 3000:
		bot.send_message(chat_id, delimeter.join(chats[chat_id]['group_list']))
	else:
		splitted = util.split_string(delimeter.join(chats[chat_id]['group_list']), 3000)
		for text in splitted: bot.send_message(chat_id, text)
	del chats[chat_id]

def ktr_get_columns():
	try:
		res = requests.get(f'{KTR_URL}/admin_api/v1/report/definition', headers=KTR_HEADER)
		if res.status_code == requests.codes.ok:
			log.debug(res.json())
		else:
			log.error(f'Get columns code {res.status_code}')
			return None
	except requests.exceptions.RequestException as e:
		log.error(f'Get columns: {e}')
		return None
	except ValueError as e:
		log.error(f'Get columns Response Text: {res.text} / ({e})')
		return None


def check_camp(params, message):
	chatid = message.chat.id
	user = f'{message.from_user.first_name} {message.from_user.last_name}'
	log.info(f'{user}: {params["campid"]} {params["group"]} {params["interval"]}')
	response_msg = """"""
	data = {
		"range": {
			"interval": params['interval'],
			"timezone": "Europe/Moscow"
		},
		"metrics": [
			"clicks", "campaign_unique_clicks", "conversions", "revenue", "cost", "profit", "sale_revenue",
			"sales", "rejected", "profit_confirmed", "approve", "lp_ctr", "roi", "roi_confirmed", "epc", "cr"
		],
		"grouping": [params['group']],
		"filters": [{"name": "campaign_id", "operator": "EQUALS", "expression": params['campid']},
		            {"name": "roi", "operator": "LESS_THAN", "expression": "0"}],
		"sort": [{"name": "cost", "order": "desc"}],
	}
	try:
		res = requests.post(f'{KTR_URL}/admin_api/v1/report/build', headers=KTR_HEADER, data=json.dumps(data))
		if res.status_code == requests.codes.ok:
			response = res.json()
			if len(response['rows']) > 0:
				chats[chatid]['group_list'] = []
				for row in response['rows']:
					response_msg += f"{row[params['group']]}\tCost {float(row['cost']):.1f}\tROI {float(row['roi']):.1f}\n"
					chats[chatid]['group_list'].append(row[params['group']])
				return response_msg
			else:
				return '–ü—É—Å—Ç–æ–π –æ—Ç—á–µ—Ç üôà'
		else:
			log.error(f'{user} Build Error: {res.status_code}')
			bot.send_message(chatid, f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞ {res.status_code}\n{res.text}\n–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞")
			return None
	except requests.exceptions.RequestException as e:
		log.error(f'{user} BuildReport: {e}')
		bot.send_message(chatid, f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ {e}\n–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞")
	except ValueError as e:
		log.error(f'{user} BuildReport Response Text: {res.text} / ({e})')
		bot.send_message(chatid, f"–û—à–∏–±–∫–∞: {res.text}\n{e}\n\n–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞")
		return None


if __name__ == '__main__':
	try:
		log.info('Started')
		bot.polling()
	except KeyboardInterrupt:
		pass
	except Exception as e:
		log.error(e)
	finally:
		log.info('Closed')